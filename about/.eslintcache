[{"/home/satyam/Desktop/projects/site/about/src/index.js":"1","/home/satyam/Desktop/projects/site/about/src/App.js":"2","/home/satyam/Desktop/projects/site/about/src/content/project.js":"3","/home/satyam/Desktop/projects/site/about/src/content/workex.js":"4","/home/satyam/Desktop/projects/site/about/src/content/education.js":"5","/home/satyam/Desktop/projects/site/about/src/content/intro.js":"6","/home/satyam/Desktop/projects/site/about/src/utilities/file_handling.js":"7","/home/satyam/Desktop/projects/site/about/src/static_url.js":"8","/home/satyam/Desktop/projects/site/about/src/About.js":"9","/home/satyam/Desktop/projects/site/about/src/ChatApp.js":"10","/home/satyam/Desktop/projects/site/about/src/hooks/useLocalStorage.js":"11","/home/satyam/Desktop/projects/site/about/src/context/socketProvider.js":"12","/home/satyam/Desktop/projects/site/about/src/components/Chat/Chat.js":"13","/home/satyam/Desktop/projects/site/about/src/components/Join/Join.js":"14","/home/satyam/Desktop/projects/site/about/src/components/Verify/Verify.js":"15","/home/satyam/Desktop/projects/site/about/src/context/MessageProvider.js":"16","/home/satyam/Desktop/projects/site/about/src/components/InfoBar/InfoBar.js":"17","/home/satyam/Desktop/projects/site/about/src/components/Input/Input.js":"18","/home/satyam/Desktop/projects/site/about/src/components/Messages/Messages.js":"19","/home/satyam/Desktop/projects/site/about/src/components/UserSideBar/UserSideBar.js":"20","/home/satyam/Desktop/projects/site/about/src/components/Messages/Message/Message.js":"21"},{"size":553,"mtime":1618089425234,"results":"22","hashOfConfig":"23"},{"size":183,"mtime":1618089661155,"results":"24","hashOfConfig":"23"},{"size":876,"mtime":1613402662367,"results":"25","hashOfConfig":"23"},{"size":813,"mtime":1613402662367,"results":"26","hashOfConfig":"23"},{"size":1041,"mtime":1613402662367,"results":"27","hashOfConfig":"23"},{"size":2940,"mtime":1618088443584,"results":"28","hashOfConfig":"23"},{"size":505,"mtime":1613402662371,"results":"29","hashOfConfig":"23"},{"size":670,"mtime":1618088702696,"results":"30","hashOfConfig":"23"},{"size":2293,"mtime":1618089590100,"results":"31","hashOfConfig":"23"},{"size":1151,"mtime":1618089640352,"results":"32","hashOfConfig":"23"},{"size":686,"mtime":1614953158578,"results":"33","hashOfConfig":"23"},{"size":1217,"mtime":1618062543824,"results":"34","hashOfConfig":"23"},{"size":1000,"mtime":1617953656757,"results":"35","hashOfConfig":"23"},{"size":3177,"mtime":1614920497322,"results":"36","hashOfConfig":"23"},{"size":1599,"mtime":1617872545883,"results":"37","hashOfConfig":"23"},{"size":3130,"mtime":1617906621472,"results":"38","hashOfConfig":"23"},{"size":1118,"mtime":1617892044303,"results":"39","hashOfConfig":"23"},{"size":1443,"mtime":1617889929140,"results":"40","hashOfConfig":"23"},{"size":1109,"mtime":1614526056439,"results":"41","hashOfConfig":"23"},{"size":1753,"mtime":1617891025272,"results":"42","hashOfConfig":"23"},{"size":1170,"mtime":1617891484151,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"159oxcd",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},"/home/satyam/Desktop/projects/site/about/src/index.js",[],["98","99"],"/home/satyam/Desktop/projects/site/about/src/App.js",["100"],"import React from 'react';\nimport AboutApp from './About.js';\nimport ChatApp from './ChatApp.js'; \n\nconst App = () =>{\n\n    return (\n      <AboutApp />  \n    )\n\n}\n\nexport default App;","/home/satyam/Desktop/projects/site/about/src/content/project.js",[],"/home/satyam/Desktop/projects/site/about/src/content/workex.js",[],"/home/satyam/Desktop/projects/site/about/src/content/education.js",[],"/home/satyam/Desktop/projects/site/about/src/content/intro.js",[],"/home/satyam/Desktop/projects/site/about/src/utilities/file_handling.js",[],"/home/satyam/Desktop/projects/site/about/src/static_url.js",[],"/home/satyam/Desktop/projects/site/about/src/About.js",[],"/home/satyam/Desktop/projects/site/about/src/ChatApp.js",[],"/home/satyam/Desktop/projects/site/about/src/hooks/useLocalStorage.js",["101","102"],"import {useEffect,useState} from 'react' ;\n\nconst PREFIX='chat-client-';\n\nexport default function useLocalStorage (key,initialValue){\n    const validateKey = PREFIX + key;\n    const [value,setValue] = useState(() =>{\n        const jsonValue=localStorage.getItem(validateKey);\n        if (jsonValue !=null && jsonValue !=undefined && jsonValue!='undefined') {return JSON.parse(jsonValue)}\n        if (typeof initialValue === 'function') {\n            return initialValue();\n        }else {\n            return initialValue;\n        }\n    })\n\n    useEffect(() => {\n        localStorage.setItem(validateKey, JSON.stringify(value));\n    },[validateKey,value])\n\n    return [value,setValue];\n}","/home/satyam/Desktop/projects/site/about/src/context/socketProvider.js",["103","104","105","106","107"],"import React, {useContext, useEffect, useState} from 'react';\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext()\n\nexport function useSocket() {\n    return useContext(SocketContext);\n}\n\n\nexport function SocketProvider({mId,children}){\n    const [socket,setSocket]=useState();\n    const SERVER = \"https://chat-dot-imysite.el.r.appspot.com/\" ; \n    let name, id, token, code, mobile ;\n    useEffect(()=>{\n        if(mId) {\n            ({name, id, token, code, mobile} = {mId});\n            }\n        const newSocket=io(SERVER,{query: {name, id,token, code, mobile}} )\n        setSocket(newSocket);\n        return () => {newSocket.emit('disarm');\n                        newSocket.close();}\n    },[mId])\n\n    function SocketWorker (){\n        const newSocket=io(SERVER)\n            return newSocket;\n                        }\n    function SocketRelay (mId){\n        const {name, id, token, code, mobile} = mId;                \n        const newSocket=io(SERVER,{query: {name, id,token, code, mobile}});\n            return newSocket;\n    }\n\n    return (\n        <SocketContext.Provider value={{socket,SocketWorker,SocketRelay}}>\n            {children}\n        </SocketContext.Provider>\n    )\n}","/home/satyam/Desktop/projects/site/about/src/components/Chat/Chat.js",["108"],"import React,{useState} from 'react';\nimport InfoBar from '../InfoBar/InfoBar';\nimport  './Chat.css';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport UserSideBar from '../UserSideBar/UserSideBar';\nimport { MessagesProvider } from '../../context/MessageProvider';\nimport { useSocket } from '../../context/socketProvider';\n\nconst Chat = ({mId, setMid})=> {\n    const {SocketRelay}=useSocket();\n    const [socket,setSocket]=useState(SocketRelay(mId));\n    return (\n        <div className=\"outerContainer\">\n            <MessagesProvider socket={socket}>\n                <div className=\"sideContainer\">\n                <UserSideBar socket={socket}/>\n                </div>\n                <div className=\"container\">\n                    <InfoBar  socket={socket} setMid={setMid}/>\n                    <Messages myId={mId}/>\n                    <Input  myId={mId}/>\n                </div>\n            </MessagesProvider>\n        </div>\n    )\n};\n\nexport default Chat;","/home/satyam/Desktop/projects/site/about/src/components/Join/Join.js",[],"/home/satyam/Desktop/projects/site/about/src/components/Verify/Verify.js",["109","110"],"import React, {useState,useEffect} from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { useSocket } from '../../context/socketProvider';\n\n\nconst Verify = ({location,mId,setId}) => {\n    const [socket,setSocket]=useState();\n    const [check,setCheck]=useState(false);\n    const name=location.state.name;\n    const code=location.state.code;\n    const mobile=location.state.mobile;\n    const otp=location.state.otp;\n    let {SocketWorker} = useSocket();\n    console.log('running multiple times');\n    const ValidateOtp = (socket,name, code , mobile, otp, setCheck) =>{\n        setCheck(true);        \n        socket.emit('otp',{name:name, code:code ,mobile: mobile, otp:otp},(res,error) => {\n            if (res) {\n                console.log('where i am?');\n                return true;\n            }else {\n                alert(error);\n                socket.close();\n                return false;\n            }\n        });\n        return true;\n    };\n    const socketListener=(socket)=>{\n        socket.on('getToken',({id,code,mobile,token,name})=>{\n            setId({id,code,mobile,token,name});\n            socket.close();\n        })\n    }\n\n    useEffect( ()=>{\n        let socket = SocketWorker();\n        setSocket(socket);\n        ValidateOtp(socket, name, code, mobile, otp, setCheck);\n    },[]);\n\n    useEffect(()=>{\n        if (check) {\n            socketListener(socket); \n        }\n    },[check])\n\n   \n\n    return ( mId ? <Redirect to={'/chat'} />\n            : (<div> \n                <p>The otp is under verification</p> \n            </div>) );\n\n}\n\nexport default Verify;","/home/satyam/Desktop/projects/site/about/src/context/MessageProvider.js",["111","112","113"],"import React,{useContext,useState,useEffect} from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MessagesContext = React.createContext();\n\nexport function useMessages() {\n    return useContext(MessagesContext);\n}\n\nexport function MessagesProvider({socket,children}){\n    /*\n    [ { recipient:{room:123,name:'newPerson '} \n      , conversation:{senderID:123,text:'hey welcome' }} ,\n       { recipient:{room:456,name:'value'} \n       , conversation:{senderID:123,text:'not welcome'}} \n     ]\n    */ \n\n    const [messages, setMessages] = useLocalStorage('messages',[]);\n    const [selected, setSelected]=useState(0);\n \n\n    function createMessages({recipient,conversation}) {\n        setMessages(prevMessages=>{\n            return [...prevMessages, {recipient, conversation} ];\n        })\n    }\n\n    function sendMessage (message,room,id,name,nameRecipient) {\n        if (message && room){\n        const innerMessage = \n        {\n            recipient:{room:room, name:nameRecipient},\n            conversation:{ senderID: id,name:name ,text:message}\n        }\n        createMessages(innerMessage);\n        socket.emit('sendMessage',{recipient:room,sender:id,text:message}); \n    }\n    }\n    useEffect(()=>{\n        if(socket) {\n            socket.on('message',({sender,text,name})=>{\n                const innerMessage = {\n                    recipient:{room:sender,name:name},\n                    conversation:{senderID:sender,name:name,text:text}\n                }\n                createMessages(innerMessage);\n            })\n        }else {return };\n        return ()=> socket.off('message');\n    },[socket,messages]);\n    \n    function getNameRecipient (messages,recipient) {\n\n        const getName = (arr,value)=>\n        {\n            if (value.recipient.room==recipient) \n            {\n            if (arr.includes(value.recipient.name)){return arr};\n            arr.push(value.recipient.name);\n            return arr;\n            } \n            return arr;\n        }\n        return messages.reduceRight(getName,[])[0];\n    }\n\n\n    function receipientSelectedArray(messages,selected) {\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n          }\n        let recipients = messages.map(message => {\n            return message.recipient.room\n        });\n        recipients=recipients.filter(onlyUnique);\n        const recipient= recipients[selected];\n        const selectName = getNameRecipient(messages,recipient);        \n        return {recipients, recipient, selectName};\n    }\n\n\n    function formattedMessages(room) {\n        const conversations= messages.filter(message=>{\n            return message.recipient.room==room;}).map(message=>(message.conversation))\n        return conversations;\n    } \n\n    const value = {\n        messages,   \n        createMessages,\n        sendMessage,\n        formattedMessages,\n        receipientSelectedArray,\n        selected,\n        setSelected,\n        getNameRecipient,\n    }\n\n    return (\n        <MessagesContext.Provider value={value}>\n            {children}\n        </MessagesContext.Provider>\n    )\n\n}","/home/satyam/Desktop/projects/site/about/src/components/InfoBar/InfoBar.js",["114","115","116","117"],"import React,{useState,useEffect} from 'react';\nimport { useMessages } from '../../context/MessageProvider';\n//import useLocalStorage from '../../hooks/useLocalStorage';\nimport closeIcon from '../../icons/closeIcon.png';\nimport onlineIcon from '../../icons/onlineIcon.png';\nimport './InfoBar.css';\n\n\nconst InfoBar=({socket,setMid}) => {\n    const {receipientSelectedArray, selected, setSelected,messages} = useMessages();\n    const [room,setRoom]=useState('');\n    function Logout (){\n        setMid();\n        socket.emit('disarm')\n        socket.close();\n    }\n\n    useEffect(()=>{\n        const {selectName} = receipientSelectedArray(messages,selected);\n        setRoom(selectName);\n    },[selected,messages])\n    return (\n    <div className=\"infoBar\">\n        <div className=\"leftInnerContainer\">\n            <img className=\"onlineIcon\" src={onlineIcon} alt=\"online image\"/>\n            <h3>{room}</h3>\n        </div>\n        <div className=\"rightInnerContainer\">\n                <a href=\"/\" onClick={Logout}><img src={closeIcon} alt=\"close image\" /></a>\n        </div>\n    </div>\n    )\n}\n\nexport default InfoBar; ","/home/satyam/Desktop/projects/site/about/src/components/Input/Input.js",["118"],"import React, {useState, useEffect} from 'react';\nimport './Input.css';\nimport {useMessages} from '../../context/MessageProvider';\n\nconst Input = ({myId}) => {\n    const [message,setMessage]=useState('');\n    const {receipientSelectedArray, selected,messages,sendMessage} = useMessages();\n    const [room,setRoom]=useState('');\n    const [nameRecipient,setnameRecipient]=useState('');\n\n    useEffect(()=>{\n        const {recipient:room,selectName} = receipientSelectedArray(messages,selected);\n        setRoom(room);\n        setnameRecipient(selectName);\n    },  [messages,selected])\n\n\n    const transferMessage = (message,room,nameRecipient) => {\n        const {name,id} = myId;\n        sendMessage(message,room,id, name, nameRecipient);\n        setMessage('');\n    }\n\n    const handleForm=(e)=>{\n        e.preventDefault();\n    }\n/*onKeyPress= {(event) =>{return event.key ==='Enter' ? transferMessage(message,room) : null}}}\n*/\n\nreturn (\n    <form className=\"form\" onSubmit={handleForm}>\n        <input \n        className=\"input\"\n        type=\"text\"\n        placeholder=\"Type a Message....\" \n        value={message}\n        onChange={event=> {setMessage(event.target.value)}}\n        \n        />\n        <button className=\"sendButton\" \n             onClick={(event) => {\n                event.preventDefault();\n                transferMessage(message,room,nameRecipient);\n             }}>Send</button>\n    </form>\n)\n}\n\nexport default Input;","/home/satyam/Desktop/projects/site/about/src/components/Messages/Messages.js",["119","120"],"import React , {useState,useEffect} from 'react';\nimport './Messages.css';\nimport Message from './Message/Message';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport {useMessages} from '../../context/MessageProvider';\n\n\nconst Messages = ({myId}) => {\n\n    const [conversations,setConversations]=useState([]);\n    const [room,setRoom]=useState('');\n    const { formattedMessages, receipientSelectedArray,selected, messages} = useMessages();\n    \n    useEffect(()=>{\n        const {recipient}=receipientSelectedArray(messages,selected);\n        setConversations(formattedMessages(recipient));\n        setRoom(recipient);\n    },[selected,messages])\n    \n    return (\n        <ScrollToBottom className=\"messages\">\n            {\n                conversations.map(\n                    (message,i) => { \n                        return (\n                            <div key={i}> \n                                <Message message={message} name={myId.id.toString()}/>\n                            </div> ) \n                        })\n            }\n        </ScrollToBottom>\n    );\n}\n\nexport default Messages;","/home/satyam/Desktop/projects/site/about/src/components/UserSideBar/UserSideBar.js",["121","122","123","124"],"import React, {useState,useEffect} from 'react';\nimport './UserSideBar.css';\nimport {useMessages} from '../../context/MessageProvider';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nconst UserSideBar = ({socket})=> {\n    const [liveUsers,setLiveUsers]=useState([]);\n    const {receipientSelectedArray, selected, setSelected,messages, getNameRecipient} = useMessages();\n    const {recipients:users, selectName} = receipientSelectedArray(messages,selected);\n    \n    useEffect(()=>{\n        socket.on('roomData',({users})=>{\n            setLiveUsers(users);\n            console.log(users,\"liveusers\");\n        },[liveUsers]);\n        return ()=>{socket.off('roomData')};\n        },[liveUsers]);\n    \n    const handleSelect =(e)=>{\n        setSelected(e);\n    }\n    const checkLive = (user,someArray)=>{\n        if (someArray.indexOf(user)==-1) \n        {return false}else {return true}                \n    };\n\n    return (\n        <div >\n            <div className=\"topBar\">\n                <h3 style={{ textAlign: 'center' }}> Users Logged In</h3>\n            </div>\n            <div className=\"userContainer\">\n            <ScrollToBottom>\n                <ul className=\"flexing\">\n                    {users.map((user,i)=>{\n                        return (\n                            <div className={i==selected ? 'active' : ''}>\n                            <li action style={checkLive(user,liveUsers)? null : {color:'red'}} onClick={()=>{handleSelect(i)}}  key={i}>{getNameRecipient(messages,user)}</li>\n                            </div>\n                            );\n                    })\n                    }\n                </ul>\n            </ScrollToBottom>\n            </div>\n        </div>\n    );\n    \n};\n\nexport default UserSideBar;","/home/satyam/Desktop/projects/site/about/src/components/Messages/Message/Message.js",["125"],"import React from 'react';\nimport './Message.css';\nimport ReactEmoji from 'react-emoji';\n\nconst Message = ({message,name})=>{\n    let isSentByCurrentUser=false;\n\n    const trimmedName=name.trim().toLowerCase();\n\n    if(message.senderID.toString().toLowerCase()== trimmedName){\n        isSentByCurrentUser=true;\n    }\n\n    return (\n        isSentByCurrentUser \n        ?   \n            (\n                <div className=\"messageContainer justifyEnd\">\n                    <p className=\"sentText pr-10\">you</p>\n                    <div className=\"messageBox backgroundBlue\">\n                        <p className=\"messageText colorWhite\">{ReactEmoji.emojify(message.text)}</p>\n                    </div>\n                </div>\n            )\n        :\n            ( \n                <div className=\"messageContainer justifyStart\">\n                    <div className=\"messageBox backgroundLight\">\n                        <p className=\"messageText colorDark\">{ReactEmoji.emojify(message.text)}</p>\n                    </div>\n                    <p className=\"sentText pl-10\">{message.name.toString()}</p>\n                </div>\n            )\n\n    );\n\n}\n\nexport default Message;\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":15},{"ruleId":"134","severity":1,"message":"135","line":9,"column":43,"nodeType":"136","messageId":"137","endLine":9,"endColumn":45},{"ruleId":"134","severity":1,"message":"135","line":9,"column":67,"nodeType":"136","messageId":"137","endLine":9,"endColumn":69},{"ruleId":"138","severity":1,"message":"139","line":17,"column":48,"nodeType":"140","endLine":17,"endColumn":53},{"ruleId":"138","severity":1,"message":"141","line":17,"column":48,"nodeType":"140","endLine":17,"endColumn":53},{"ruleId":"138","severity":1,"message":"142","line":17,"column":48,"nodeType":"140","endLine":17,"endColumn":53},{"ruleId":"138","severity":1,"message":"143","line":17,"column":48,"nodeType":"140","endLine":17,"endColumn":53},{"ruleId":"138","severity":1,"message":"144","line":17,"column":48,"nodeType":"140","endLine":17,"endColumn":53},{"ruleId":"130","severity":1,"message":"145","line":12,"column":19,"nodeType":"132","messageId":"133","endLine":12,"endColumn":28},{"ruleId":"138","severity":1,"message":"146","line":40,"column":7,"nodeType":"147","endLine":40,"endColumn":9,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":46,"column":7,"nodeType":"147","endLine":46,"endColumn":14,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"151","line":51,"column":7,"nodeType":"147","endLine":51,"endColumn":24,"suggestions":"152"},{"ruleId":"134","severity":1,"message":"153","line":57,"column":37,"nodeType":"136","messageId":"137","endLine":57,"endColumn":39},{"ruleId":"134","severity":1,"message":"153","line":85,"column":42,"nodeType":"136","messageId":"137","endLine":85,"endColumn":44},{"ruleId":"130","severity":1,"message":"154","line":10,"column":47,"nodeType":"132","messageId":"133","endLine":10,"endColumn":58},{"ruleId":"138","severity":1,"message":"155","line":21,"column":7,"nodeType":"147","endLine":21,"endColumn":26,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":25,"column":13,"nodeType":"159","endLine":25,"endColumn":78},{"ruleId":"157","severity":1,"message":"158","line":29,"column":46,"nodeType":"159","endLine":29,"endColumn":87},{"ruleId":"138","severity":1,"message":"155","line":15,"column":9,"nodeType":"147","endLine":15,"endColumn":28,"suggestions":"160"},{"ruleId":"130","severity":1,"message":"161","line":11,"column":12,"nodeType":"132","messageId":"133","endLine":11,"endColumn":16},{"ruleId":"138","severity":1,"message":"162","line":18,"column":7,"nodeType":"147","endLine":18,"endColumn":26,"suggestions":"163"},{"ruleId":"130","severity":1,"message":"164","line":9,"column":30,"nodeType":"132","messageId":"133","endLine":9,"endColumn":40},{"ruleId":"138","severity":1,"message":"165","line":17,"column":11,"nodeType":"147","endLine":17,"endColumn":22,"suggestions":"166"},{"ruleId":"134","severity":1,"message":"153","line":23,"column":36,"nodeType":"136","messageId":"137","endLine":23,"endColumn":38},{"ruleId":"134","severity":1,"message":"153","line":37,"column":46,"nodeType":"136","messageId":"137","endLine":37,"endColumn":48},{"ruleId":"134","severity":1,"message":"153","line":10,"column":49,"nodeType":"136","messageId":"137","endLine":10,"endColumn":51},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'ChatApp' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'name' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","Assignments to the 'id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'token' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'code' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'mobile' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'setSocket' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'SocketWorker', 'code', 'mobile', 'name', and 'otp'. Either include them or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has missing dependencies: 'socket' and 'socketListener'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'createMessages'. Either include it or remove the dependency array.",["171"],"Expected '===' and instead saw '=='.","'setSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'receipientSelectedArray'. Either include it or remove the dependency array.",["172"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["173"],"'room' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formattedMessages' and 'receipientSelectedArray'. Either include them or remove the dependency array.",["174"],"'selectName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [SocketWorker, code, mobile, name, otp]",{"range":"190","text":"191"},"Update the dependencies array to be: [check, socket, socketListener]",{"range":"192","text":"193"},"Update the dependencies array to be: [socket, messages, createMessages]",{"range":"194","text":"195"},"Update the dependencies array to be: [selected, messages, receipientSelectedArray]",{"range":"196","text":"197"},"Update the dependencies array to be: [messages, receipientSelectedArray, selected]",{"range":"198","text":"199"},"Update the dependencies array to be: [selected, messages, receipientSelectedArray, formattedMessages]",{"range":"200","text":"201"},"Update the dependencies array to be: [liveUsers, socket]",{"range":"202","text":"203"},[1314,1316],"[SocketWorker, code, mobile, name, otp]",[1414,1421],"[check, socket, socketListener]",[1624,1641],"[socket, messages, createMessages]",[692,711],"[selected, messages, receipientSelectedArray]",[563,582],"[messages, receipientSelectedArray, selected]",[635,654],"[selected, messages, receipientSelectedArray, formattedMessages]",[687,698],"[liveUsers, socket]"]